---
description: 
globs: 
alwaysApply: false
---
# 开发流程指南

## 开发步骤
1. **问题分析**: 明确任务目标和约束条件
2. **设计方案**: 设计数据结构和算法
3. **实现步骤**: 自顶向下实现功能
4. **测试验证**: 编写单元测试和集成测试

## 分支管理
- `main`: 主分支，保持稳定可发布状态
- `develop`: 开发分支，集成已完成功能
- `feature/*`: 功能分支，用于开发新功能
- `bugfix/*`: 修复分支，用于修复bug
- `release/*`: 发布分支，用于版本发布准备

## 提交规范
遵循语义化提交信息格式：
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码风格更改
- `refactor`: 代码重构
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

示例: `feat: 添加按钮组件的loading状态`

## 代码审查
- 代码必须符合既定规范
- 关键函数和组件必须有注释
- 复杂算法需要解释思路
- 每次提交至少由一名团队成员审查

## 测试要求
- 单元测试覆盖率不低于80%
- 组件测试应覆盖所有props和事件
- 关键业务流程需要端到端测试
- 每次提交前运行自动化测试

## 发布流程
1. 在`develop`分支完成功能开发和测试
2. 创建`release`分支进行版本准备
3. 执行最终测试和文档更新
4. 合并到`main`分支并打标签
5. 发布到npm

## 版本管理
遵循语义化版本管理:
- 主版本号: 不兼容的API变更
- 次版本号: 向下兼容的功能新增
- 修订版本号: 向下兼容的问题修复

## 文档维护
- 每个组件必须有对应文档
- 文档应包含基本用法和API说明
- 重要更新需在CHANGELOG.md记录
- README.md应保持最新
